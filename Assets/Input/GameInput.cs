//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Input/GameInput.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @GameInput: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @GameInput()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""GameInput"",
    ""maps"": [
        {
            ""name"": ""Global"",
            ""id"": ""a177bf9c-0029-40e3-bd36-18a5ea51a8d2"",
            ""actions"": [
                {
                    ""name"": ""Toggle console"",
                    ""type"": ""Button"",
                    ""id"": ""cefe0b27-fc5b-49ec-bf72-29eb9ccecfb1"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Prev console command"",
                    ""type"": ""Button"",
                    ""id"": ""a3b4f08e-fa80-4dc7-af69-7e0bdc8d8eee"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Next console command"",
                    ""type"": ""Button"",
                    ""id"": ""8a13e705-7545-4957-b92e-ca55d31e0b13"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""50ad14a2-f135-4c92-9f0c-45910baf9a56"",
                    ""path"": ""<Keyboard>/backquote"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Toggle console"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""95aba118-8122-4dfd-8ce5-1f2101d7ce54"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Prev console command"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""08b7abfa-0336-42c2-b661-4fcd614f7aaf"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Next console command"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Ship"",
            ""id"": ""55f9abe8-bc41-427e-a308-5585dca83dc8"",
            ""actions"": [
                {
                    ""name"": ""ChangeSpeed"",
                    ""type"": ""PassThrough"",
                    ""id"": ""4517825a-086b-4743-9e20-7c04d7c87a63"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""65dbba1e-23bc-49fd-96f2-3d25de250f3a"",
                    ""path"": ""<Mouse>/scroll/y"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ChangeSpeed"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Global
        m_Global = asset.FindActionMap("Global", throwIfNotFound: true);
        m_Global_Toggleconsole = m_Global.FindAction("Toggle console", throwIfNotFound: true);
        m_Global_Prevconsolecommand = m_Global.FindAction("Prev console command", throwIfNotFound: true);
        m_Global_Nextconsolecommand = m_Global.FindAction("Next console command", throwIfNotFound: true);
        // Ship
        m_Ship = asset.FindActionMap("Ship", throwIfNotFound: true);
        m_Ship_ChangeSpeed = m_Ship.FindAction("ChangeSpeed", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Global
    private readonly InputActionMap m_Global;
    private List<IGlobalActions> m_GlobalActionsCallbackInterfaces = new List<IGlobalActions>();
    private readonly InputAction m_Global_Toggleconsole;
    private readonly InputAction m_Global_Prevconsolecommand;
    private readonly InputAction m_Global_Nextconsolecommand;
    public struct GlobalActions
    {
        private @GameInput m_Wrapper;
        public GlobalActions(@GameInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @Toggleconsole => m_Wrapper.m_Global_Toggleconsole;
        public InputAction @Prevconsolecommand => m_Wrapper.m_Global_Prevconsolecommand;
        public InputAction @Nextconsolecommand => m_Wrapper.m_Global_Nextconsolecommand;
        public InputActionMap Get() { return m_Wrapper.m_Global; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(GlobalActions set) { return set.Get(); }
        public void AddCallbacks(IGlobalActions instance)
        {
            if (instance == null || m_Wrapper.m_GlobalActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_GlobalActionsCallbackInterfaces.Add(instance);
            @Toggleconsole.started += instance.OnToggleconsole;
            @Toggleconsole.performed += instance.OnToggleconsole;
            @Toggleconsole.canceled += instance.OnToggleconsole;
            @Prevconsolecommand.started += instance.OnPrevconsolecommand;
            @Prevconsolecommand.performed += instance.OnPrevconsolecommand;
            @Prevconsolecommand.canceled += instance.OnPrevconsolecommand;
            @Nextconsolecommand.started += instance.OnNextconsolecommand;
            @Nextconsolecommand.performed += instance.OnNextconsolecommand;
            @Nextconsolecommand.canceled += instance.OnNextconsolecommand;
        }

        private void UnregisterCallbacks(IGlobalActions instance)
        {
            @Toggleconsole.started -= instance.OnToggleconsole;
            @Toggleconsole.performed -= instance.OnToggleconsole;
            @Toggleconsole.canceled -= instance.OnToggleconsole;
            @Prevconsolecommand.started -= instance.OnPrevconsolecommand;
            @Prevconsolecommand.performed -= instance.OnPrevconsolecommand;
            @Prevconsolecommand.canceled -= instance.OnPrevconsolecommand;
            @Nextconsolecommand.started -= instance.OnNextconsolecommand;
            @Nextconsolecommand.performed -= instance.OnNextconsolecommand;
            @Nextconsolecommand.canceled -= instance.OnNextconsolecommand;
        }

        public void RemoveCallbacks(IGlobalActions instance)
        {
            if (m_Wrapper.m_GlobalActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IGlobalActions instance)
        {
            foreach (var item in m_Wrapper.m_GlobalActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_GlobalActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public GlobalActions @Global => new GlobalActions(this);

    // Ship
    private readonly InputActionMap m_Ship;
    private List<IShipActions> m_ShipActionsCallbackInterfaces = new List<IShipActions>();
    private readonly InputAction m_Ship_ChangeSpeed;
    public struct ShipActions
    {
        private @GameInput m_Wrapper;
        public ShipActions(@GameInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @ChangeSpeed => m_Wrapper.m_Ship_ChangeSpeed;
        public InputActionMap Get() { return m_Wrapper.m_Ship; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(ShipActions set) { return set.Get(); }
        public void AddCallbacks(IShipActions instance)
        {
            if (instance == null || m_Wrapper.m_ShipActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_ShipActionsCallbackInterfaces.Add(instance);
            @ChangeSpeed.started += instance.OnChangeSpeed;
            @ChangeSpeed.performed += instance.OnChangeSpeed;
            @ChangeSpeed.canceled += instance.OnChangeSpeed;
        }

        private void UnregisterCallbacks(IShipActions instance)
        {
            @ChangeSpeed.started -= instance.OnChangeSpeed;
            @ChangeSpeed.performed -= instance.OnChangeSpeed;
            @ChangeSpeed.canceled -= instance.OnChangeSpeed;
        }

        public void RemoveCallbacks(IShipActions instance)
        {
            if (m_Wrapper.m_ShipActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IShipActions instance)
        {
            foreach (var item in m_Wrapper.m_ShipActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_ShipActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public ShipActions @Ship => new ShipActions(this);
    public interface IGlobalActions
    {
        void OnToggleconsole(InputAction.CallbackContext context);
        void OnPrevconsolecommand(InputAction.CallbackContext context);
        void OnNextconsolecommand(InputAction.CallbackContext context);
    }
    public interface IShipActions
    {
        void OnChangeSpeed(InputAction.CallbackContext context);
    }
}
